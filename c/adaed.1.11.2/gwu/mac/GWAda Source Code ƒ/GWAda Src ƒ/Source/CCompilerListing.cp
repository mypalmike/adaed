/****************************************************************************** CCompilerListing.c				CCompilerListing Window Director Class		Copyright (C) 1985-1992  New York University	Copyright (C) 1994 George Washington University	 	This file is part of the GWAdaEd system, an extension of the Ada/Ed-C	system.  See the Ada/Ed README file for warranty (none) and distribution	info and also the GNU General Public License for more details.	Generated by Classyª (Object Factory) 9:22 PM Thu, Aug 5, 1993	This file is only generated once. You can modify it by filling	in the placeholder functions and adding any new functions you wish.	If you change the name of the document class, a fresh version of this	file will be generated. If you have made any changes to the file	with the old name, you will have to copy those changes to the new	file by hand. ******************************************************************************/#include "CCompilerListing.h"#include "CompilerListingItems.h"#include <CApplication.h>#include <Constants.h>#include <CDecorator.h>#include <CDesktop.h>#include <CDirectorOwner.h>#include <CFile.h>#include <TBUtilities.h>#include <CWindow.h>extern	CApplication *gApplication;		/* The application					*/extern CDecorator	*gDecorator;		/* Decorator for arranging windows	*/extern CDesktop		*gDesktop;			/* The visible Desktop				*//**** C O N S T R U C T I O N / D E S T R U C T I O N   M E T H O D S ****//****************************************************************************** ICCompilerListing	Initialize the dialog. Directors are not stored in view resources,	so this method *is* called to initialize the director. Change	the code as indicated to perform your own initialization. ******************************************************************************/void CCompilerListing::ICCompilerListing(CDirectorOwner *aSupervisor){		// Initialize data members here that must be set up		// before BeginData is called		// We use the inherited keyword because of a C++		// compiler bug involving _classname::. This will be		// changed when the compiler is fixed.	x_CCompilerListing::Ix_CCompilerListing(aSupervisor);		// Initialize any other data members here}/****************************************************************************** ProviderChanged	{OVERRIDE} 	 	A pane changed value******************************************************************************/void CCompilerListing::ProviderChanged(CCollaborator *aProvider, long reason, void* info){#define DO_NOTHING	if (ignore)						// Honor ignore flag set by superclass		return;	ignore = TRUE;					// Don't enter recursively			//	Override this function if you need to respond to		//	changes in pane values.	TRY	{		if (FALSE)			DO_NOTHING;						//	Insert your cases here. They should look like:					//	else if (reason == rrr && aProvider == fxxx_xxx)			//	{			//		do something			//	}				//	Note that there is a lot of traffic through this function			//	in addition to value changes. Do not forget to call the			//	superclass for all changes you do not handle completely.			else			x_CCompilerListing::ProviderChanged(aProvider, reason, info);	}	CATCH		ignore = FALSE;	ENDTRY		ignore = FALSE;}/****************************************************************************** DoCommand {OVERRIDE}		Dispatch commands ******************************************************************************/void CCompilerListing::DoCommand(long theCommand){	switch (theCommand)	{			// Insert your command handler cases here, e.g.,			//			//	case cmdMine:			//		DoMyCmd();			//		break;		default:			x_CCompilerListing::DoCommand(theCommand);	}}